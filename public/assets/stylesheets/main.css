/* /////////////////////////////////////////////////////

WikiEduDashboard styles
Author: nate@wintr.us

///////////////////////////////////////////////////// */
html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  display: block;
}
body {
  line-height: 1;
}
ol,
ul {
  list-style: none;
}
blockquote,
q {
  quotes: none;
}
blockquote:before,
blockquote:after,
q:before,
q:after {
  content: '';
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
img {
  max-width: 100%;
}
input,
textarea {
  -webkit-appearance: none;
  -webkit-border-radius: 0;
}
.body-content,
p,
li {
  font-size: 16px;
  line-height: 1.5625;
  letter-spacing: 0.05px;
}
.body-content--large,
p--large,
li--large,
p.large,
li.large {
  font-size: 18px;
  line-height: 1.555;
  letter-spacing: 0.06px;
}
.list-content {
  font-size: 14px;
  line-height: 2.142;
  letter-spacing: 0.5px;
}
.form-content,
h2 {
  font-family: 'Droid Serif', serif;
  font-size: 18px;
  line-height: 1.166666;
  letter-spacing: 1.29px;
}
.form-content--small,
h2--small {
  font-size: 14px;
  line-height: 1.143;
  letter-spacing: 0.78px;
}
.large-heading,
h3 {
  font-size: 36px;
  line-height: 1.194;
  letter-spacing: 0.45px;
}
.medium-heading,
h4 {
  font-size: 24px;
  line-height: 1.1666;
  letter-spacing: 0.38px;
}
.small-heading,
h5 {
  font-size: 18px;
  line-height: 1.6667;
  letter-spacing: 1px;
}
header {
  margin-top: 40px;
  text-align: center;
}
.main-logo {
  display: inline-block;
  width: 60px;
  height: 60px;
  background: transparent url("/assets/images/wiki-logo.png") no-repeat center center;
  -webkit-background-size: 100% auto;
  background-size: 100% auto;
  margin: 0 auto;
  overflow: hidden;
  text-indent: -9999px;
}
* {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
html {
  -webkit-text-size-adjust: 100%;
  -webkit-font-smoothing: antialiased;
  height: 100%;
}
body {
  font-family: 'Droid Serif', serif;
  width: 100%;
  height: 100%;
  color: #4f4f4f;
}
main {
  *zoom: 1;
  width: auto;
  max-width: 800px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  margin: 40px auto;
}
main:before,
main:after {
  content: '';
  display: table;
}
main:after {
  clear: both;
}
h1,
h2,
h3,
h4,
h5 {
  margin: 0;
}
p {
  margin: 5px auto;
  color: #4f4f4f;
}
p:first-child {
  margin-top: 0;
}
p:last-child {
  margin-bottom: 0;
}
li {
  margin-left: 20px;
  margin-bottom: 0.5em;
}
li:first-child {
  margin-top: 0;
}
ul {
  list-style: disc;
}
a {
  color: #636c8e;
  text-decoration: none;
}
em {
  font-style: italic;
}
select {
  font-family: 'Droid Serif', serif;
}

/*# sourceMappingURL=data:application/json;base64, */